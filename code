#nn
from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.autograd import Variable




args={}
kwargs={}
args['batch_size'] = 1000
args['test_batch_size']=1000
args['epochs']=1  #The number of Epochs is the number of times you go through the full dataset. 
args['lr']=0.25 #Learning rate is how fast it will decend. 
args['momentum']=0.5 #SGD momentum (default: 0.5) Momentum is a moving average of our gradients (helps to keep direction).

args['seed']=1 #random seed
args['log_interval']=10
args['cuda']=False



#load the data
train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.Compose([
                       transforms.ToTensor(),
                       transforms.Normalize((0.1307,), (0.3081,))
                   ])),
    batch_size=args['batch_size'], shuffle=True, **kwargs)

test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, transform=transforms.Compose([
                       transforms.ToTensor(),
                       transforms.Normalize((0.1307,), (0.3081,))
                   ])),
    batch_size=args['test_batch_size'], shuffle=True, **kwargs)



class Net(nn.Module):
    #This defines the structure of the NN.
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d()  #Dropout
        self.fc1 = nn.Linear(320, 100)
        self.fc2 = nn.Linear(100, 10)

    def forward(self, x):
        #Convolutional Layer/Pooling Layer/Activation
        x = F.relu(F.max_pool2d(self.conv1(x), 2)) 
        #Convolutional Layer/Dropout/Pooling Layer/Activation
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        #Fully Connected Layer/Activation
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        #Fully Connected Layer/Activation
        x = self.fc2(x)
        #Softmax gets probabilities. 
        return F.log_softmax(x, dim=1)

def train(epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        if args['cuda']:
            data, target = data.cuda(), target.cuda()
        #Variables in Pytorch are differenciable. 
        data, target = Variable(data), Variable(target)
        #This will zero out the gradients for this batch.
        optimizer.zero_grad()
        output = model(data)
        # Calculate the loss The negative log likelihood loss. It is useful to train a classification problem with C classes.
        loss = F.nll_loss(output, target)
        #dloss/dx for every Variable 
        loss.backward()
        #to do a one-step update on our parameter.
        optimizer.step()
        #Print out the loss periodically. 
        if batch_idx % args['log_interval'] == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data))

def test():
    model.eval()
    test_loss = 0
    correct = 0
    for data, target in test_loader:
        if args['cuda']:
            data, target = data.cuda(), target.cuda()
        data, target = Variable(data, volatile=True), Variable(target)
        output = model(data)
        test_loss += F.nll_loss(output, target, size_average=False).data # sum up batch loss
        pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability
        correct += pred.eq(target.data.view_as(pred)).long().cpu().sum()

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

model = Net()
if args['cuda']:
    model.cuda()

optimizer = optim.SGD(model.parameters(), lr=args['lr'], momentum=args['momentum'])

for epoch in range(1, args['epochs'] + 1):
    train(epoch)
    test()

#creates a window

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import sys



# window class
def create_a_window():
    class Window(QMainWindow):
        def __init__(self):
            super().__init__()
    
            # setting title
            self.setWindowTitle("Paint with PyQt5")
    
            # setting geometry to main window
            self.setGeometry(100, 100, 800, 600)
    
            # creating image object
            self.image = QImage(self.size(), QImage.Format_RGB32)
    
            # making image color to white
            self.image.fill(Qt.white)
    
            # variables
            # drawing flag
            self.drawing = False
            # default brush size
            self.brushSize = 2
            # default color
            self.brushColor = Qt.black
    
            # QPoint object to tract the point
            self.lastPoint = QPoint()
    
            # creating menu bar
            mainMenu = self.menuBar()
    
            # creating file menu for save and clear action
            fileMenu = mainMenu.addMenu("File")
    
            # adding brush size to main menu
            b_size = mainMenu.addMenu("Brush Size")
    
            # adding brush color to ain menu
            b_color = mainMenu.addMenu("Brush Color")
    
            # creating save action
            saveAction = QAction("Save", self)
            # adding short cut for save action
            saveAction.setShortcut("Ctrl + S")
            # adding save to the file menu
            fileMenu.addAction(saveAction)
            # adding action to the save
            saveAction.triggered.connect(self.save)
    
            # creating clear action
            clearAction = QAction("Clear", self)
            # adding short cut to the clear action
            clearAction.setShortcut("Ctrl + C")
            # adding clear to the file menu
            fileMenu.addAction(clearAction)
            # adding action to the clear
            clearAction.triggered.connect(self.clear)
    
            # creating options for brush sizes
            # creating action for selecting pixel of 4px
            pix_4 = QAction("4px", self)
            # adding this action to the brush size
            b_size.addAction(pix_4)
            # adding method to this
            pix_4.triggered.connect(self.Pixel_4)
    
            # similarly repeating above steps for different sizes
            pix_7 = QAction("7px", self)
            b_size.addAction(pix_7)
            pix_7.triggered.connect(self.Pixel_7)
    
            pix_9 = QAction("9px", self)
            b_size.addAction(pix_9)
            pix_9.triggered.connect(self.Pixel_9)
    
            pix_12 = QAction("12px", self)
            b_size.addAction(pix_12)
            pix_12.triggered.connect(self.Pixel_12)
    
            # creating options for brush color
            # creating action for black color
            black = QAction("Black", self)
            # adding this action to the brush colors
            b_color.addAction(black)
            # adding methods to the black
            black.triggered.connect(self.blackColor)
    
            # similarly repeating above steps for different color
            white = QAction("White", self)
            b_color.addAction(white)
            white.triggered.connect(self.whiteColor)
    
            green = QAction("Green", self)
            b_color.addAction(green)
            green.triggered.connect(self.greenColor)
    
            yellow = QAction("Yellow", self)
            b_color.addAction(yellow)
            yellow.triggered.connect(self.yellowColor)
    
            red = QAction("Red", self)
            b_color.addAction(red)
            red.triggered.connect(self.redColor)
    
    
        # method for checking mouse cicks
        def mousePressEvent(self, event):
    
            # if left mouse button is pressed
            if event.button() == Qt.LeftButton:
                # make drawing flag true
                self.drawing = True
                # make last point to the point of cursor
                self.lastPoint = event.pos()
    
        # method for tracking mouse activity
        def mouseMoveEvent(self, event):
            
            # checking if left button is pressed and drawing flag is true
            if (event.buttons() & Qt.LeftButton) & self.drawing:
                
                # creating painter object
                painter = QPainter(self.image)
                
                # set the pen of the painter
                painter.setPen(QPen(self.brushColor, self.brushSize,
                                Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
                
                # draw line from the last point of cursor to the current point
                # this will draw only one step
                painter.drawLine(self.lastPoint, event.pos())
                
                # change the last point
                self.lastPoint = event.pos()
                # update
                self.update()
    
        # method for mouse left button release
        def mouseReleaseEvent(self, event):
    
            if event.button() == Qt.LeftButton:
                # make drawing flag false
                self.drawing = False
    
        # paint event
        def paintEvent(self, event):
            # create a canvas
            canvasPainter = QPainter(self)
            
            # draw rectangle  on the canvas
            canvasPainter.drawImage(self.rect(), self.image, self.image.rect())
    
        # method for saving canvas
        def save(self):
            filePath, _ = QFileDialog.getSaveFileName(self, "Save Image", "",
                            "PNG(*.png);;JPEG(*.jpg *.jpeg);;All Files(*.*) ")
    
            if filePath == "":
                return
            self.image.save(filePath)
    
        # method for clearing every thing on canvas
        def clear(self):
            # make the whole canvas white
            self.image.fill(Qt.white)
            # update
            self.update()
    
        # methods for changing pixel sizes
        def Pixel_4(self):
            self.brushSize = 4
    
        def Pixel_7(self):
            self.brushSize = 7
    
        def Pixel_9(self):
            self.brushSize = 9
    
        def Pixel_12(self):
            self.brushSize = 12
    
        # methods for changing brush color
        def blackColor(self):
            self.brushColor = Qt.black
    
        def whiteColor(self):
            self.brushColor = Qt.white
    
        def greenColor(self):
            self.brushColor = Qt.green
    
        def yellowColor(self):
            self.brushColor = Qt.yellow
    
        def redColor(self):
            self.brushColor = Qt.red

    # create pyqt5 app
    App = QApplication(sys.argv)
    
    # create the instance of our Window
    window = Window()
    
    # showing the window
    window.show()
    
    # start the app
    App.exec()

# image to np array

from PIL import Image
import numpy as np

def image_to_array(image):
    image1 = Image.open(image)
    numpyimage = np.array(image1.getdata())
